--2018 Mohammad Rasmi Khashashneh
--
-- tank.script: Controls the tank game object behaviour
--
--Permission is hereby granted, free of charge, to any person obtaining a copy
--of this software and associated documentation files (the "Software"), to deal
--in the Software without restriction, including without limitation the rights
--to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
--copies of the Software, and to permit persons to whom the Software is
--furnished to do so, subject to the following conditions:
--
--The above copyright notice and this permission notice shall be included in all
--copies or substantial portions of the Software.
--
--THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
--IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
--FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
--AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
--LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
--UT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
--SOFTWARE.

-- Tank and generic constants
local TANK_SPEED = 2													--Default tank speed
local BOUNCE_SPEED = 5													--Walls/Obstacles collision bounce back distance	
local ROTATION_ANGLE = math.pi/8 										--Default tank rotation angle in radians, 3 steps each quarter
local DEATH_ROTATION_ANGLE = ROTATION_ANGLE * 2 						--Rotation increment when for animating a bullet hit
local DEATH_ANIMATION_TIMEOUT = 1.5										--How long the animation should run
local INPUT_DELAY = 0.1													--Delay in seconds to simulate the original quirky movement
local P1_CNTRL_PREFIX = "p1_"											--P1 key input prefix, used when handling input
local P2_CNTRL_PREFIX = "p2_"											--P2 key input prefix, used when handling input
local BULLET_SPAWN_OFFSET = vmath.vector3(8, 0, 0)						--How far the bullet must initially be away from the firing tank 
local BULLET_FACTORY = "/tank_level1#bullet_factory"					--Bullet factory URL, used to construct new bullets!
-- TODO: can we define/include global variables?

-- Message constants
local MSG_COLLISION_RESPONSE = "collision_response"						--Message received when colliding with other objects.
local MSG_BULLET_DEAD = "bullet_dead"									--Message received when the bullet hits something and it's dead
--local MSG_SET_LEVEL = "set_level"

-- Input constants postfix. A prefix (P1_CNTRL_PREFIX, P2_CNTRL_PREFIX) will be considered when comparing hash values.
local MSG_FIRE = "fire" 												--A firing (bullet) message
local MSG_FORWARD = "forward"											--A move (player) forward message
local MSG_ROTATE = "rotate"												--A rotate (player) message
local MSG_ROTATE_COUNTER = "rotate_counter"								--A counter clockwise rotate (player) message
local MSG_IS_HIT = "is_hit"												--A player (being) hit message
local MSG_MOVE_BULLET = "move_bullet"									--??
local MSG_GAME_OVER	= "game_over"										--??


-- script static variables
local playing_sound = false												--A flag to lock playing background noise.

-- object properties initialization 
go.property("level", hash(""))											--Level id property
go.property("color", vmath.vector4())									--Tank color property
go.property("input_prefix", hash(""))									--Input prefix used for deciding which input ids this should react to.

-- Object's internal and other properties initialization
function init(self)
	self.next_movement = vmath.vector3()								--Vector used mainly as the speed of tank on the x axis
	self.death_timer = 0												--Simple counter used to time the death animation duration
	self.hit = false													--Flag indicatinig the tank is hit, triggers the death animation.
	self.next_direction = 0												--Angle delta used when rotating the tank
	self.input_delay = 0												--Counter for the input delay(skipping) timer.
	self.colliding = false												--Flag indicating the tank has just collided with something.
	self.bullet = nil													--The tank bullet after id agter being fired. Null otherwise
	--Initializing the current direction property according to the current tank orientation (as layedout in the editor)
	local m = vmath.matrix4_from_quat(go.get_rotation())				--Returns the Rz matrix, m00 is cosine(angle)
	--self.current_direction = 1
	if m.m00 == -1 then
		self.current_direction = math.pi								--Facing left, we have a 180 deg. agnle
	elseif m.m00 == 1 then
		self.current_direction = 0 										--No rotattion as we are facing right
	else
		self.current_direction = math.acos(m.m00)						--Get the angle from arc_cosine(cosine(angle))
	end
	if self.input_prefix == hash(P1_CNTRL_PREFIX) then					--Set this instance control prefix
		self.prefix = P1_CNTRL_PREFIX
	elseif self.input_prefix == hash(P2_CNTRL_PREFIX) then
		self.prefix = P2_CNTRL_PREFIX
	end
end


function sign_of(v)
	if v < 0 then
		return -1
	else
		return 1
	end
end 

-- Move tank according to input
function update(self, dt)
	if self.hit then													--First check if we're hit
		if self.death_timer >= DEATH_ANIMATION_TIMEOUT then				--Reset the hit/death flags
			self.hit = false
			self.death_timer = 0
			msg.post("/tank_level1#level_noise_02", "play_sound")
			playing_sound = false
		else															--Play a rotation  animation to simulate the original hit animation
			self.next_direction = (DEATH_ROTATION_ANGLE) + self.next_direction
			local direction = vmath.quat_rotation_z(self.next_direction)
			go.set_rotation(direction)
			self.death_timer = self.death_timer + dt
		end
		return															--Discard any other input in case of a hit
	end
	if(self.input_delay > 0) then										--Otherwise we process the input once every a certain period to simulate the way
		self.input_delay = self.input_delay - dt						--the original combat handles movement and input.
		return
	end
	self.input_delay = INPUT_DELAY
	local pos = go.get_position()
	local velocity = self.next_movement									--Get the delta movement based on the last input/event
	if self.colliding then
		self.colliding = false											--In case of a collision we reset the collision flag
	end
	self.current_direction = self.current_direction + self.next_direction	--Update the current direction according to input
	local direction = vmath.quat_rotation_z(self.current_direction)		--Get the rotation as a quaternion
	pos = pos + vmath.rotate(direction, velocity)						--Update the new position considering the rotation
	go.set_rotation(direction)											--Set the new rotation
	go.set_position(pos)												--Set the new position
	if self.bullet ~= nil and self.next_direction ~= 0 then
		msg.post(self.bullet, hash(MSG_MOVE_BULLET), 
			{direction = sign_of(self.next_direction)})
	end
	self.next_movement = vmath.vector3()								--Reset for the next update
	self.next_direction = 0												--Reset for the next update
end

-- Respond to messages
function on_message(self, message_id, message)
	if message_id == hash(MSG_COLLISION_RESPONSE) then
		if message.other_id == self.level then							--If colliding with level obstacles
			self.next_movement.x = -BOUNCE_SPEED
			self.colliding = true										--Set the collision flag
		elseif not self.hit then
			self.hit = true												--Otherwise it's a bullet hit
			msg.post(self.level, MSG_IS_HIT, {player = go.get_id()})	--Rport back to the level
			msg.post("/tank_level1#hit_noise", "play_sound")
			msg.post("/tank_level1#tank_move", "stop_sound")
			msg.post("/tank_level1#level_noise_02", "stop_sound")
			playing_sound = true
		end
	elseif message_id == hash(MSG_BULLET_DEAD) then
		self.bullet = nil
		print("Bullet is dead: ", message.reason)
	elseif message_id == hash(MSG_GAME_OVER) then
		init(self)
	end
end

-- Instanciate a bullet
function fire_bullet(self)
	if self.bullet ~= nil then
		return
	end
	local rot = go.get_rotation()										--Get the current tank rotation
	local pos = go.get_position() + vmath.rotate(rot, BULLET_SPAWN_OFFSET)	--Calculate the bullet location considering the tank's pos,rotation plus an offset
	pos.z = 0.3															--Set the bullet Z order
	local id = factory.create(BULLET_FACTORY, pos, rot, 
		{pong = false, level = self.level, tank = go.get_id()})			--Create the game object and setup properties
	sprite.set_constant(id, "tint", self.color)							--Set the bullet tint accordingly
	self.bullet = id
	msg.post("/tank_level1#shoot_sound", "play_sound")
end

-- Respond to input messages and play sound effects accordingly
function on_input(self, action_id, action)
	if self.colliding then												--In case of a collision
		msg.post("/tank_level1#tank_move", "stop_sound")				--Stop the tank noise
		msg.post("/tank_level1#level_noise_02", "play_sound")			--Play the level noise
		playing_sound = false											--Update the sound flags
		return
	end
	if action_id == hash(self.prefix..MSG_FIRE) and action.pressed then	--Prefix is used to decide which player input to respond to
		fire_bullet(self)
	elseif action_id == hash(self.prefix..MSG_FORWARD) then
		if action.released then
			msg.post("/tank_level1#tank_move", "stop_sound")
			msg.post("/tank_level1#level_noise_02", "play_sound")
			playing_sound = false
		else
			if not playing_sound then
				msg.post("/tank_level1#tank_move", "play_sound")
				msg.post("/tank_level1#level_noise_02", "stop_sound")
				playing_sound = true
			end
			self.next_movement.x = TANK_SPEED
		end
	else
		if action_id == hash(self.prefix..MSG_ROTATE) and (action.pressed or action.repeated) then
			self.next_direction = ROTATION_ANGLE
		elseif action_id == hash(self.prefix..MSG_ROTATE_COUNTER) and (action.pressed or action.repeated) then
			self.next_direction = -ROTATION_ANGLE
		end
	end
end