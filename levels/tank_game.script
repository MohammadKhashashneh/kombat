--2018 Mohammad Rasmi Khashashneh
--
-- tank_game.script: controls the tank game behaviour
--
--Permission is hereby granted, free of charge, to any person obtaining a copy
--of this software and associated documentation files (the "Software"), to deal
--in the Software without restriction, including without limitation the rights
--to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
--copies of the Software, and to permit persons to whom the Software is
--furnished to do so, subject to the following conditions:
--
--The above copyright notice and this permission notice shall be included in all
--copies or substantial portions of the Software.
--
--THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
--IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
--FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
--AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
--LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
--UT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
--SOFTWARE.

-- Player and field default colors
local COLOR_P1 = vmath.vector4(0.44, 0.44, 1, 1)
local COLOR_P2 = vmath.vector4(0.78, 0.44, 0.76, 1)
local COLOR_FIELD = vmath.vector4(0.37, 0.47, 0.1, 1)
local COLOR_OBSTACLES = vmath.vector4(0.95, 0.76, 0.50, 1)
local P1 = "/p1"													--P1 component path
local P2 = "/p2"													--P2 component path
local FIELD = "#field"												--Field component path
local BORDERS = "#borders"											--Borders component path
-- TODO: can we define/include global variables? it would be best to define below constants once
local MSG_START = "start"											--A start game message
local MSG_IS_HIT = "is_hit"											--A player (being) hit message
local P1_CNTRL_PREFIX = "p1_"										--P1 input prefix, to be used for filtering p1 input commands
local P2_CNTRL_PREFIX = "p2_"										--P2 input prefix, to be used for filtering p2 input commands
local demo = true													--Flag indicating wer're in demo mode
local init_seed = false												--Flag indicating we need to init the seed used to change colors in demo mode.
local DEMO_TIMEOUT = 3												--Number of seconds to change colors in demo mode

-- Initializing level and tank properties
function init(self)
	msg.post(".", "acquire_input_focus")
	go.set("/p1#tank1", "level", go.get_id())
	go.set("/p2#tank1", "level", go.get_id())
	go.set("/p1#tank1", "color", COLOR_P1)
	go.set("/p2#tank1", "color", COLOR_P2)
	go.set("/p1#tank1", "input_prefix", hash(P1_CNTRL_PREFIX))
	go.set("/p2#tank1", "input_prefix", hash(P2_CNTRL_PREFIX))
	self.p1_score = 0
	self.p2_score = 0
	self.demo_timer = DEMO_TIMEOUT
	self.tank_move_sound = false
	self.rate = 0
end

-- Randmize and return a color
function get_random_color(base)
	local col = vmath.vector4(base)
	if not init_seed then
		local table = os.date("*t")
		local seed = (table.day + table.month + table.year) / (table.sec + table.min + table.hour)
		math.randomseed(seed)
		init_seed = true
	end
	col.x = math.random()
	--col.y = math.random()											--FIXME: Limit result colors to those supported by the 2600
	col.z = math.random()
	return col
end

-- Reset objectcolors to the actual fixed colors when starting the game
function init_colors()
	sprite.set_constant(FIELD, "tint", COLOR_FIELD)
	sprite.set_constant("/p1#tank", "tint", COLOR_P1)
	sprite.set_constant("#p1_tens", "tint", COLOR_P1)
	sprite.set_constant("#p1_ones", "tint", COLOR_P1)
	sprite.set_constant("/p2#tank", "tint", COLOR_P2)
	sprite.set_constant("#p2_tens", "tint", COLOR_P2)
	sprite.set_constant("#p2_ones", "tint", COLOR_P2)
	sprite.set_constant(BORDERS, "tint", COLOR_OBSTACLES)
end

-- Update the level in demo mode
function update(self, dt)
	if demo then
		local col
		self.demo_timer = self.demo_timer + dt
		if(self.demo_timer > DEMO_TIMEOUT) then						--Change scene colors as with the original
			self.demo_timer = 0
			sprite.set_constant(FIELD, "tint", get_random_color(COLOR_FIELD))
			col = get_random_color(COLOR_P1)
			sprite.set_constant("/p1#tank", "tint", col)
			sprite.set_constant("#p1_tens", "tint", col)
			sprite.set_constant("#p1_ones", "tint", col)
			col = get_random_color(COLOR_P2)
			sprite.set_constant("/p2#tank", "tint", col)
			sprite.set_constant("#p2_tens", "tint", col)
			sprite.set_constant("#p2_ones", "tint", col)
			sprite.set_constant(BORDERS, "tint", get_random_color(COLOR_OBSTACLES))
		end	
	end
end


function reset_positions()
	-- TODO
end

-- Reset the level on start
function reset_level()
	reset_positions()
	init_colors()
	msg.post("#level_noise_02", "play_sound")
end

-- Handle level input messages (during demo mode)
function on_input(self, action_id, action)
	if action_id == hash(MSG_START) and action.pressed then
		demo = false
		reset_level()
		msg.post(".", "release_input_focus")						--Release the input focus when out of demo mode
		msg.post(P1, "acquire_input_focus")							--Allow input capture by both players
		msg.post(P2, "acquire_input_focus")							--
	end
end

-- Update the player score as specified by score_prefix
function update_scores(score_prefix, score)
	local tens = math.floor(score * 0.1)
	local ones = score - (tens * 10)
	msg.post(score_prefix.."tens", "play_animation", {id = hash("num_0"..tens)})
	msg.post(score_prefix.."ones", "play_animation", {id = hash("num_0"..ones)})
end

-- Deal with messages sent by players
function on_message(self, message_id, message)
	if message_id == hash(MSG_IS_HIT) then							--Respond to being hit messages by updating the opposing player scores.
		if message.player == hash(P1) then
			self.p2_score = self.p2_score + 1
			update_scores("#p2_", self.p2_score)
		elseif message.player == hash(P2) then
			self.p1_score = self.p1_score + 1
			update_scores("#p1_", self.p1_score)
		end
	end
end